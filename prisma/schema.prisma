// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Tenants (العملاء)
model Tenant {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  plan        String   @default("basic") // basic, advanced, professional
  limits      Json     @default("{}") // usage limits
  status      String   @default("active") // active, suspended, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  projects    Project[]
  usage       UsageDaily[]
  auditLogs   AuditLog[]

  @@map("tenants")
}

// Users (المستخدمين)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      String   @default("viewer") // owner, admin, editor, viewer
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("users")
}

// Projects (المشاريع)
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  tenantId    String
  status      String   @default("active") // active, paused, archived
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  chatflows   Chatflow[]
  knowledge   KnowledgeSource[]
  indices     VectorIndex[]
  conversations Conversation[]

  @@map("projects")
}

// Chatflows (من Flowise)
model Chatflow {
  id          String   @id @default(cuid())
  name        String
  type        String   @default("support") // support, sales, faq
  projectId   String
  flowiseId   String?  // ID from Flowise
  flowJson    Json     // Flowise flow configuration
  version     Int      @default(1)
  status      String   @default("active") // active, inactive, error
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@map("chatflows")
}

// Knowledge Sources (مصادر المعرفة)
model KnowledgeSource {
  id          String   @id @default(cuid())
  name        String
  type        String   // pdf, docx, csv, url, drive
  uri         String
  projectId   String
  status      String   @default("pending") // pending, processing, indexed, error
  metadata    Json     @default("{}") // file size, pages, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("knowledge_sources")
}

// Vector Indices (فهارس المتجهات)
model VectorIndex {
  id          String   @id @default(cuid())
  projectId   String
  namespace   String   // tenantId:projectId
  stats       Json     @default("{}") // document count, vector count, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("vector_indices")
}

// Conversations (المحادثات)
model Conversation {
  id          String   @id @default(cuid())
  projectId   String
  chatflowId  String?
  channel     String   @default("web") // web, whatsapp, messenger, instagram
  userId      String?  // external user ID
  rating      Int?     // 1-5 stars
  status      String   @default("active") // active, closed, archived
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  chatflow    Chatflow?   @relation(fields: [chatflowId], references: [id])
  messages    Message[]

  @@map("conversations")
}

// Messages (الرسائل)
model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // user, assistant, system
  content        String
  tokensIn       Int      @default(0)
  tokensOut      Int      @default(0)
  sources        Json?    // RAG sources
  metadata       Json     @default("{}") // channel info, etc.
  createdAt      DateTime @default(now())

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Usage Daily (الاستخدام اليومي)
model UsageDaily {
  id        String   @id @default(cuid())
  tenantId  String
  date      DateTime
  requests  Int      @default(0)
  tokensIn  Int      @default(0)
  tokensOut Int      @default(0)
  cost      Float    @default(0)
  createdAt DateTime @default(now())

  // Relations
  tenant    Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, date])
  @@map("usage_daily")
}

// Audit Log (سجل التدقيق)
model AuditLog {
  id        String   @id @default(cuid())
  tenantId  String
  actorId   String
  action    String
  payload   Json     @default("{}")
  createdAt DateTime @default(now())

  // Relations
  tenant    Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}
