import { SITE } from './constants';
// OpenRouter Chat API (neutral naming)
export interface OpenRouterMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

export interface OpenRouterResponse {
  choices: Array<{
    message: {
      content: string;
      role: string;
    };
  }>;
  usage: {
    total_tokens: number;
    prompt_tokens: number;
    completion_tokens: number;
  };
}

export interface ChatbotContext {
  websiteInfo: string;
  services: string;
  companyInfo: string;
}

// Context used to guide the assistant tone and knowledge
const WEBSITE_CONTEXT: ChatbotContext = {
  websiteInfo: `
    ูุญู ุดุฑูุฉ "ุฅูุฌู ุฃูุฑููุง" ููุฏู ุญููู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ุงููุทู ุงูุนุฑุจู.
    ูุฎุฏู ูุตุฑ ูุงูุณุนูุฏูุฉ ูุฏูู ุงูุฎููุฌ.
    ููุฏู ุฎุฏูุงุช: ุจูุช ูุงุณูุฌุฑ ุฐููุ ุชุณููู ุฅููุชุฑูููุ ููุฏูุง ููููุชุงุฌุ ุชุตููู ุฌุฑุงูููุ ุชุตููุฑ ููุชูุบุฑุงููุ ูุญููู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ููุฃุนูุงู.
  `,
  services: `
    ุฎุฏูุงุชูุง ุงูุฑุฆูุณูุฉ:
    1. ุจูุช ูุงุณูุฌุฑ ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู - ููุชุฒู ุจุณูุงุณุงุช Meta
    2. ุงูุชุณููู ุงูุฅููุชุฑููู - ุญููุงุช ูุฏููุนุฉ ูุฅุฏุงุฑุฉ ุฅุนูุงูุงุช
    3. ููุฏูุง ููููุชุงุฌ - ููุฏูููุงุช ุฅุนูุงููุฉ ูุตูุฑุฉ
    4. ุชุตููู ุฌุฑุงููู - ูููุงุช ุจุตุฑูุฉ ูููุงุฏ ุญููุงุช
    5. ุชุตููุฑ ููุชูุบุฑุงูู - ูุญุชูู ูุณุชุฎุฏููู ุฃุตูู
    6. ุญููู ุงูุฐูุงุก ุงูุงุตุทูุงุนู - ุฃุชูุชุฉ ูุชุญูููุงุช
  `,
  companyInfo: `
    ูุนูููุงุช ุงูุดุฑูุฉ:
    - ุงููุงูู: EKRAMY FOUAAD
    - ุงููุงุชู: +20 106 616 1454
    - ุงูุจุฑูุฏ ุงูุฅููุชุฑููู: ziad@ekramy-ai.online
    - ุงูุนููุงู: ูุตุฑ โ ุงูุฅุณููุฏุฑูุฉ โ ุงูุนุงูุฑูุฉ
    - ูุฑูุฒ ุนูู: ุงูุณุนูุฏูุฉ ูุงูุฎููุฌ
  `
};

function createSystemMessage(): string {
  return `ุฃูุช ูุณุงุนุฏ ุฐูู ูุดุฑูุฉ "ุฅูุฌู ุฃูุฑููุง". 

${WEBSITE_CONTEXT.websiteInfo}

${WEBSITE_CONTEXT.services}

${WEBSITE_CONTEXT.companyInfo}

ุชุนูููุงุช ูููุฉ:
- ุงุฑุฏ ุจุงููุบุฉ ุงูุนุฑุจูุฉ ุฏุงุฆูุงู
- ูู ูุฏูุฏุงูุ ุจุณูุทุงูุ ูุจูุจุฑุฉ ุฅูุณุงููุฉ ูุดุฌุนุฉ
- ูุฏู ูุนูููุงุช ุฏูููุฉ ุนู ุฎุฏูุงุชูุง ูุน ุฃูุซูุฉ ูุตูุฑุฉ
- ูู ุงูุณุคุงู ููู ูุฒุงุฑ/ุฏุนุงุจุฉุ ุฑุฏ ุจุฎูุฉ ุฏู ูุญุชุฑูุฉ ุจุฏูู ุฅุณูุงุจ
- ูู ูุด ุนุงุฑู ุงูุฅุฌุงุจุฉุ ุงุนุชุฐุฑ ุจูุทู ูุงูุชุฑุญ ูุงุชุณุงุจ ูููุณุงุนุฏุฉ
- ุณุงุนุฏ ุงูุนููู ูุฎุชุงุฑ ุงูุฎุฏูุฉ ุงูููุงุณุจุฉ ุจูุงุกู ุนูู ูุฏูู ุจุงูุชcisุงุฑ
- ุงุฐูุฑ ุฃููุง ูุฎุฏู ูุตุฑ ูุงูุณุนูุฏูุฉ ูุงูุฎููุฌ ุนูุฏ ุงูุญุงุฌุฉ
- ุฃููุฏ ุฃู ุงูุจูุช ููุชุฒู ุจุณูุงุณุงุช Meta ููุทุงู 24 ุณุงุนุฉ ุนูุฏ ุฐูุฑ ูุงุณูุฌุฑ
- ูู ุฑุณุงูุฉ ุงููุณุชุฎุฏู ุบูุฑ ูููููุฉ ุฃู ูุฒุงุฑุ ุฑุฏ ุจุฌููุฉ ูุงุญุฏุฉ ูุทููุฉ ุซู ุงุฑุฌุน ููุฑุงู ููููุถูุน.
- ูุง ุชูุฑุฑ ููุณ ุงูุณุคุงู ูุฑุชูู ูุชุชุงููุชููุ ุจุฏูู ุงูุตูุงุบุฉ ุฃู ูุฏูู ุฅุฌุงุจุฉ ูุจุงุดุฑุฉ.`;
}

export async function sendMessageToOpenRouter(
  userMessage: string,
  conversationHistory: OpenRouterMessage[] = []
): Promise<string> {
  try {
    const messages: OpenRouterMessage[] = [
      { role: 'system', content: createSystemMessage() },
      ...conversationHistory,
      { role: 'user', content: userMessage }
    ];

    const response = await fetch('/api/openrouter/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages,
        model: process.env.OPENROUTER_MODEL || 'qwen/qwen2.5-vl-32b-instruct:free',
        temperature: 0.7,
        max_tokens: 1000,
        stream: false
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data: OpenRouterResponse = await response.json();
    if (data.choices && data.choices.length > 0) {
      return data.choices[0].message.content;
    }
    throw new Error('No response from OpenRouter');
  } catch (error) {
    console.error('Error calling OpenRouter API:', error);
    return `ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ูู ุงูุงุชุตุงู. ููููู ุงูุชูุงุตู ูุนูุง ูุจุงุดุฑุฉ ุนุจุฑ ูุงุชุณุงุจ: +20 106 616 1454 ุฃู ุนุจุฑ ุงูุจุฑูุฏ ุงูุฅููุชุฑููู: ziad@ekramy-ai.online`;
  }
}

export async function processUserMessage(
  userMessage: string,
  conversationHistory: OpenRouterMessage[] = []
): Promise<{ response: string; shouldAddToHistory: boolean }> {
  try {
    const normalized = userMessage.trim().toLowerCase();
    const pick = <T,>(arr: T[]) => arr[Math.floor(Math.random() * arr.length)];

    const greetings = ['ูุฑุญุจุง', 'ูุฑุญุจุง!', 'ุฃููุงู', 'ุงููุง', 'ุงููุง!', 'ุงูุณูุงู ุนูููู', 'ุณูุงู ุนูููู'];
    const greetingReplies = [
      'ูุง ููุง! ููุฑุชูุง ๐ ููู ุฃูุฏุฑ ุฃุณุงุนุฏูุ',
      'ุฃููุงู ุจูู! ุชุญุจ ูุจุฏุฃ ุจุฎุฏูุฉ ูุนููุฉุ',
      'ูุนูููู ุงูุณูุงู ูุฑุญูุฉ ุงููู โ ุชุญุช ุฃูุฑูุ ุชุณุฃู ุนู ุฅููุ',
      'ุดุฑูุชูุง! ุฎุจุฑูู ูุฏููุ ูุฃุฑุดุญ ูู ุงูุฎุฏูุฉ ุงูุฃูุณุจ ๐'
    ];
    if (greetings.some(g => normalized.includes(g))) {
      return { response: pick(greetingReplies), shouldAddToHistory: false };
    }

    // Price flow: structured questions + booking CTA
    const priceTriggers = ['ูุงู', 'ุจูุงู', 'ุงูุณุนุฑ', 'ุงูุชูููุฉ', 'ูุนูููุง ูุงู', 'ุจูููู ูุงู'];
    if (priceTriggers.some(t => normalized.includes(t))) {
      const steps = [
        'ููุน ุงูุฐูุงุก: ุฑุฏูุฏ ุซุงุจุชุฉ ุฃู ูุฏุนููุฉ ุจูููุฐุฌ LLMุ',
        'ุนุฏุฏ ุงูุณููุงุฑูููุงุช/ุงูุฑุฏูุฏ ุงูุฐููุฉ ุงููุทููุจุฉ ุชูุฑูุจุงูุ',
        'ุชูุงููุงุช ุฅุถุงููุฉ: CRM / Google Sheets / WhatsAppโฆุ',
        'ูู ุชุญุชุงุฌ ุฏุนู ุดูุฑู ููุชุงุจุนุฉุ'
      ];
      const booking = `ูู ุญุงุจุจ ููุฌุฒูุง ุจุณุฑุนุฉ: ุงุญุฌุฒ ูู ${SITE.calendlyUrl || '/book'} ุฃู ุชูุงุตู ูุงุชุณุงุจ: ${SITE.whatsappUrl}.`;
      return { response: `ุจุงููุณุจุฉ ููุชูููุฉุ ูุญุฏุฏ ุฃููุงู ุจุนุถ ุงูููุงุท:\n- ${steps.join('\n- ')}\n\n${booking}`, shouldAddToHistory: false };
    }

    const humorTriggers = ['ูุฒุงุฑ', 'ููุชุฉ', 'ููุช', 'ุจูุฒุฑ', 'ุจูุฒุงุฑ', 'ูููู', 'lol', 'ุญูุจุคู', 'ุญูุจุคุฉ'];
    const offensiveTriggers = ['ุงูู', 'ุฃูู', 'ุงุจูู', 'ุฃุจูู', 'ูุณ', 'ููุนู', 'ูุงุญุงุช', 'ูุญุจุฉ', 'ูุชูุงู', 'ููู'];
    const isHumor = humorTriggers.some(t => normalized.includes(t));
    const isOffensive = offensiveTriggers.some(t => normalized.includes(t));

    const humorReplies = [
      'ุถุญูุชูู ๐ ุจุณ ุฎูููุง ููุฌุฒ! ุชุญุจ ูุจุฏุฃ ุจุฎุฏูุฉ ุงูุชุณููู ุงูุฅููุชุฑููู ููุง ุงูุฐูุงุก ุงูุงุตุทูุงุนูุ',
      'ุชูุงู ุงููุฒุงุฑ! ๐ ุทูุจ ูููู ุนุงูุฒ ุชูุตู ูุฅูู ููุธุจุทูุง ูู.',
      'ูุงูู! ูุฎูู ุงููุฒุงุฑ ูุงุตู ูุทูู ููููู ุดุบููุง ๐ ูุญุชุงุฌ ุฅูู ุจุงูุธุจุทุ'
    ];

    const wittyRedirect = [
      '๐ ุฃูุง ุจูุช ูุง ุตุฏูููุ ูุนูุฏูุด ุนูุดูุฉ ููุง ุทูุฑุงูุ ุจุณ ุฃูุฏุฑ ุฃููุฏู ูู ุงูุชุณููู ุงูุฅููุชุฑููู ุฃู ุญููู ุงูุฐูุงุก ุงูุงุตุทูุงุนู. ุชุญุจ ูุจุฏุฃ ุจุฅููุ',
      '๐ ูููุ ูููุชูุง! ูุฑุฌุน ููุดุบู: ููุชู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู ููุง ุงูุชุณููู ุงูุฅููุชุฑูููุ',
      '๐ ูุฌุฑุจูู ุจุฑุงุญุชูุ ูุฃูุง ุฃุฑุฌูุนู ููููุถูุน! ุชููู ุงูุฃุณุนุงุฑ ููุง ุชูุงุตูู ุงูุฎุฏูุฉุ'
    ];

    const recentUserMsgs = conversationHistory.filter(m => m.role === 'user').slice(-6).map(m => m.content.toLowerCase());
    const recentHumorCount = recentUserMsgs.filter(m => humorTriggers.some(t => m.includes(t))).length;
    const recentOffensiveCount = recentUserMsgs.filter(m => offensiveTriggers.some(t => m.includes(t))).length;

    if (isOffensive) {
      if (recentOffensiveCount >= 1) {
        return { response: 'ุฎูููุง ูู ุงููููุฏ ูุง ุจุทู ๐ ูู ููุชู ุจุฎุฏูุฉ ูุนููุฉ ูููู ุนูููุงุ ูุฃูุง ุฃุณุงุนุฏู ููุฑูุง.', shouldAddToHistory: false };
      }
      return { response: pick(wittyRedirect), shouldAddToHistory: false };
    }

    if (isHumor) {
      if (recentHumorCount >= 1) {
        return { response: '๐ ูุทููุฉ! ูุฑุฌุน ูููุถูุนูุ ุงุฎุชุงุฑ: 1) ุงูุฃุณุนุงุฑ 2) ุทุฑููุฉ ุงูุชูููุฐ 3) ุฃูุซูุฉ ุณุฑูุนุฉ', shouldAddToHistory: false };
      }
      return { response: pick(humorReplies), shouldAddToHistory: false };
    }

    const ambiguousTriggers = ['ูุด ูุงูู', 'ูุด ูุงุถุญ', 'ุงูู', 'ุฅูู', 'ูุนูู', 'ุงุฒุงู', 'ุฅุฒุงู', 'ูู', 'ูู', 'ุฎุบ', 'ููู', 'ุณููู'];
    const isShort = normalized.length <= 2 || /^(.)\1{2,}$/.test(normalized);
    const clarifyPool = [
      'ุชูุงู ๐ุ ูููู ุชูุถูุญ ุฃูุชุฑุ ุชุญุจ ุชุนุฑู ุงูุฃุณุนุงุฑ ููุง ุงูุชูุงุตูู ุงููููุฉุ',
      'ุญูู! ูุตุฏู ุนูู ุงูุฎุฏูุฉ ููุณูุง ููุง ุงูุชูููุฉ ูุงููุฏุฉุ',
      'ุฎูููู ุฃูููู ุตุญุ ุฅูุช ุนุงูุฒ ุชุนุฑู ุฅูู ุจุงูุถุจุทุ',
      'ุทูุจุ ูู ุชุฑููุฒ ุนูู ุงูุชุณููู ุงูุฅููุชุฑููู ููุง ุงูุฐูุงุก ุงูุงุตุทูุงุนูุ',
      'ุนูุดุงู ุฃููุฏู ุจุณุฑุนุฉ: ุชููู ุงูุฃุณุนุงุฑ ููุง ุทุฑููุฉ ุงูุชูููุฐุ'
    ];
    if (isShort || ambiguousTriggers.some(t => normalized.includes(t))) {
      return { response: pick(clarifyPool), shouldAddToHistory: false };
    }

    const thanksTriggers = ['ุดูุฑุง', 'ุดูุฑูุง', 'ูุดููุฑ', 'thx', 'thanks'];
    const thanksReplies = [
      'ุงูุนูู! ูู ุญุงุจุจ ูููู ุจุฎุทูุฉ ุนูููุฉ ูููู ๐ฌ',
      'ุนูู ุงูุฑุญุจ! ุชุญุจ ุฃุญุฌุฒ ูู ุงุณุชุดุงุฑุฉ ุณุฑูุนุฉุ',
      'ุชุญุช ุฃูุฑู ุฏุงุฆููุง โ ุฃู ุงุณุชูุณุงุฑ ุชุงููุ'
    ];
    if (thanksTriggers.some(t => normalized.includes(t))) {
      return { response: pick(thanksReplies), shouldAddToHistory: false };
    }

    const byeTriggers = ['ูุน ุงูุณูุงูุฉ', 'ูุฏุงุนุง', 'ูุฏุงุนูุง', 'ุจุงู'];
    const byeReplies = [
      'ูู ุญูุธ ุงููู! ููุฌูุฏ ูู ุงุญุชุฌุช ุฃู ุญุงุฌุฉ ๐',
      'ูุน ุงูุณูุงูุฉ โ ุจุงูุชูููู! ๐',
      'ุณุนูุฏ ุจุฎุฏูุชู! ูุดููู ุนูู ุฎูุฑ ๐'
    ];
    if (byeTriggers.some(t => normalized.includes(t))) {
      return { response: pick(byeReplies), shouldAddToHistory: false };
    }

    const aiResponse = await sendMessageToOpenRouter(userMessage, conversationHistory);
    return { response: aiResponse, shouldAddToHistory: true };
  } catch (error) {
    console.error('Error processing user message:', error);
    return { response: 'ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ. ููููู ุงูุชูุงุตู ูุนูุง ุนุจุฑ ูุงุชุณุงุจ ููุญุตูู ุนูู ูุณุงุนุฏุฉ ููุฑูุฉ.', shouldAddToHistory: false };
  }
}

/**
 * ููุงุณ ุณุฑุนุฉ ููุงุฐุฌ Qwen ุงููุญุฏุฏุฉ ูู ุฎูุงู ูุณุงุฑ bench
 */
export async function benchmarkModels(prompt?: string, models?: string[]): Promise<
  { model: string; ok: boolean; latencyMs: number; preview?: string; error?: string }[]
> {
  try {
    const response = await fetch('/api/openrouter/bench', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prompt: prompt || 'ุงุฎุชุจุงุฑ ุณุฑุนุฉ ุจุณูุท', models })
    });
    if (!response.ok) {
      const text = await response.text();
      throw new Error(`Bench error: ${response.status} ${text}`);
    }
    const data = await response.json();
    return data.results as { model: string; ok: boolean; latencyMs: number; preview?: string; error?: string }[];
  } catch (error) {
    console.error('benchmarkModels error:', error);
    return [];
  }
}


